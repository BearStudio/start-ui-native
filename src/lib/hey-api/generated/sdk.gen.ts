// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AccountSubmitOnboardingData, AccountSubmitOnboardingResponses, AccountUpdateInfoData, AccountUpdateInfoResponses, BookCreateData, BookCreateResponses, BookDeleteByIdData, BookDeleteByIdResponses, BookGetAllData, BookGetAllResponses, BookGetByIdData, BookGetByIdResponses, BookUpdateByIdData, BookUpdateByIdResponses, GenreGetAllData, GenreGetAllResponses, UserCreateData, UserCreateResponses, UserDeleteByIdData, UserDeleteByIdResponses, UserGetAllData, UserGetAllResponses, UserGetByIdData, UserGetByIdResponses, UserGetUserSessionsData, UserGetUserSessionsResponses, UserRevokeUserSessionData, UserRevokeUserSessionResponses, UserRevokeUserSessionsData, UserRevokeUserSessionsResponses, UserUpdateByIdData, UserUpdateByIdResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const accountSubmitOnboarding = <ThrowOnError extends boolean = false>(options: Options<AccountSubmitOnboardingData, ThrowOnError>) => {
    return (options.client ?? client).post<AccountSubmitOnboardingResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/account/submit-onboarding',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const accountUpdateInfo = <ThrowOnError extends boolean = false>(options: Options<AccountUpdateInfoData, ThrowOnError>) => {
    return (options.client ?? client).post<AccountUpdateInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/account/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const bookGetAll = <ThrowOnError extends boolean = false>(options?: Options<BookGetAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<BookGetAllResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/books',
        ...options
    });
};

export const bookCreate = <ThrowOnError extends boolean = false>(options: Options<BookCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<BookCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/books',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const bookDeleteById = <ThrowOnError extends boolean = false>(options: Options<BookDeleteByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<BookDeleteByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/books/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const bookGetById = <ThrowOnError extends boolean = false>(options: Options<BookGetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<BookGetByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/books/{id}',
        ...options
    });
};

export const bookUpdateById = <ThrowOnError extends boolean = false>(options: Options<BookUpdateByIdData, ThrowOnError>) => {
    return (options.client ?? client).post<BookUpdateByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/books/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const genreGetAll = <ThrowOnError extends boolean = false>(options?: Options<GenreGetAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenreGetAllResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/genres',
        ...options
    });
};

export const userGetAll = <ThrowOnError extends boolean = false>(options?: Options<UserGetAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetAllResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

export const userCreate = <ThrowOnError extends boolean = false>(options: Options<UserCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<UserCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userDeleteById = <ThrowOnError extends boolean = false>(options: Options<UserDeleteByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<UserDeleteByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userGetById = <ThrowOnError extends boolean = false>(options: Options<UserGetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<UserGetByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

export const userUpdateById = <ThrowOnError extends boolean = false>(options: Options<UserUpdateByIdData, ThrowOnError>) => {
    return (options.client ?? client).post<UserUpdateByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userGetUserSessions = <ThrowOnError extends boolean = false>(options: Options<UserGetUserSessionsData, ThrowOnError>) => {
    return (options.client ?? client).get<UserGetUserSessionsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}/sessions',
        ...options
    });
};

export const userRevokeUserSessions = <ThrowOnError extends boolean = false>(options: Options<UserRevokeUserSessionsData, ThrowOnError>) => {
    return (options.client ?? client).post<UserRevokeUserSessionsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/sessions/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userRevokeUserSession = <ThrowOnError extends boolean = false>(options: Options<UserRevokeUserSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<UserRevokeUserSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'apiKeyCookie',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/sessions/{sessionToken}/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
