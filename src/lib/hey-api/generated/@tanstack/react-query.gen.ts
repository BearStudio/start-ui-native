// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { accountSubmitOnboarding, accountUpdateInfo, bookCreate, bookDeleteById, bookGetAll, bookGetById, bookUpdateById, genreGetAll, type Options, userCreate, userDeleteById, userGetAll, userGetById, userGetUserSessions, userRevokeUserSession, userRevokeUserSessions, userUpdateById } from '../sdk.gen';
import type { AccountSubmitOnboardingData, AccountUpdateInfoData, BookCreateData, BookCreateResponse, BookDeleteByIdData, BookGetAllData, BookGetAllResponse, BookGetByIdData, BookUpdateByIdData, BookUpdateByIdResponse, GenreGetAllData, GenreGetAllResponse, UserCreateData, UserCreateResponse, UserDeleteByIdData, UserGetAllData, UserGetAllResponse, UserGetByIdData, UserGetUserSessionsData, UserGetUserSessionsResponse, UserRevokeUserSessionData, UserRevokeUserSessionsData, UserUpdateByIdData, UserUpdateByIdResponse } from '../types.gen';

export const accountSubmitOnboardingMutation = (options?: Partial<Options<AccountSubmitOnboardingData>>): UseMutationOptions<unknown, DefaultError, Options<AccountSubmitOnboardingData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AccountSubmitOnboardingData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await accountSubmitOnboarding({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const accountUpdateInfoMutation = (options?: Partial<Options<AccountUpdateInfoData>>): UseMutationOptions<unknown, DefaultError, Options<AccountUpdateInfoData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AccountUpdateInfoData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await accountUpdateInfo({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const bookGetAllQueryKey = (options?: Options<BookGetAllData>) => createQueryKey('bookGetAll', options);

export const bookGetAllOptions = (options?: Options<BookGetAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await bookGetAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: bookGetAllQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const bookGetAllInfiniteQueryKey = (options?: Options<BookGetAllData>): QueryKey<Options<BookGetAllData>> => createQueryKey('bookGetAll', options, true);

export const bookGetAllInfiniteOptions = (options?: Options<BookGetAllData>) => {
    return infiniteQueryOptions<BookGetAllResponse, DefaultError, InfiniteData<BookGetAllResponse>, QueryKey<Options<BookGetAllData>>, string | Pick<QueryKey<Options<BookGetAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<BookGetAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await bookGetAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: bookGetAllInfiniteQueryKey(options)
    });
};

export const bookCreateMutation = (options?: Partial<Options<BookCreateData>>): UseMutationOptions<BookCreateResponse, DefaultError, Options<BookCreateData>> => {
    const mutationOptions: UseMutationOptions<BookCreateResponse, DefaultError, Options<BookCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await bookCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const bookDeleteByIdMutation = (options?: Partial<Options<BookDeleteByIdData>>): UseMutationOptions<unknown, DefaultError, Options<BookDeleteByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<BookDeleteByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await bookDeleteById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const bookGetByIdQueryKey = (options: Options<BookGetByIdData>) => createQueryKey('bookGetById', options);

export const bookGetByIdOptions = (options: Options<BookGetByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await bookGetById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: bookGetByIdQueryKey(options)
    });
};

export const bookUpdateByIdMutation = (options?: Partial<Options<BookUpdateByIdData>>): UseMutationOptions<BookUpdateByIdResponse, DefaultError, Options<BookUpdateByIdData>> => {
    const mutationOptions: UseMutationOptions<BookUpdateByIdResponse, DefaultError, Options<BookUpdateByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await bookUpdateById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const genreGetAllQueryKey = (options?: Options<GenreGetAllData>) => createQueryKey('genreGetAll', options);

export const genreGetAllOptions = (options?: Options<GenreGetAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await genreGetAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: genreGetAllQueryKey(options)
    });
};

export const genreGetAllInfiniteQueryKey = (options?: Options<GenreGetAllData>): QueryKey<Options<GenreGetAllData>> => createQueryKey('genreGetAll', options, true);

export const genreGetAllInfiniteOptions = (options?: Options<GenreGetAllData>) => {
    return infiniteQueryOptions<GenreGetAllResponse, DefaultError, InfiniteData<GenreGetAllResponse>, QueryKey<Options<GenreGetAllData>>, string | Pick<QueryKey<Options<GenreGetAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GenreGetAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await genreGetAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: genreGetAllInfiniteQueryKey(options)
    });
};

export const userGetAllQueryKey = (options?: Options<UserGetAllData>) => createQueryKey('userGetAll', options);

export const userGetAllOptions = (options?: Options<UserGetAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userGetAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetAllQueryKey(options)
    });
};

export const userGetAllInfiniteQueryKey = (options?: Options<UserGetAllData>): QueryKey<Options<UserGetAllData>> => createQueryKey('userGetAll', options, true);

export const userGetAllInfiniteOptions = (options?: Options<UserGetAllData>) => {
    return infiniteQueryOptions<UserGetAllResponse, DefaultError, InfiniteData<UserGetAllResponse>, QueryKey<Options<UserGetAllData>>, string | Pick<QueryKey<Options<UserGetAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<UserGetAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await userGetAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetAllInfiniteQueryKey(options)
    });
};

export const userCreateMutation = (options?: Partial<Options<UserCreateData>>): UseMutationOptions<UserCreateResponse, DefaultError, Options<UserCreateData>> => {
    const mutationOptions: UseMutationOptions<UserCreateResponse, DefaultError, Options<UserCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userDeleteByIdMutation = (options?: Partial<Options<UserDeleteByIdData>>): UseMutationOptions<unknown, DefaultError, Options<UserDeleteByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UserDeleteByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userDeleteById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetByIdQueryKey = (options: Options<UserGetByIdData>) => createQueryKey('userGetById', options);

export const userGetByIdOptions = (options: Options<UserGetByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userGetById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetByIdQueryKey(options)
    });
};

export const userUpdateByIdMutation = (options?: Partial<Options<UserUpdateByIdData>>): UseMutationOptions<UserUpdateByIdResponse, DefaultError, Options<UserUpdateByIdData>> => {
    const mutationOptions: UseMutationOptions<UserUpdateByIdResponse, DefaultError, Options<UserUpdateByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userUpdateById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetUserSessionsQueryKey = (options: Options<UserGetUserSessionsData>) => createQueryKey('userGetUserSessions', options);

export const userGetUserSessionsOptions = (options: Options<UserGetUserSessionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userGetUserSessions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetUserSessionsQueryKey(options)
    });
};

export const userGetUserSessionsInfiniteQueryKey = (options: Options<UserGetUserSessionsData>): QueryKey<Options<UserGetUserSessionsData>> => createQueryKey('userGetUserSessions', options, true);

export const userGetUserSessionsInfiniteOptions = (options: Options<UserGetUserSessionsData>) => {
    return infiniteQueryOptions<UserGetUserSessionsResponse, DefaultError, InfiniteData<UserGetUserSessionsResponse>, QueryKey<Options<UserGetUserSessionsData>>, string | Pick<QueryKey<Options<UserGetUserSessionsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<UserGetUserSessionsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await userGetUserSessions({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetUserSessionsInfiniteQueryKey(options)
    });
};

export const userRevokeUserSessionsMutation = (options?: Partial<Options<UserRevokeUserSessionsData>>): UseMutationOptions<unknown, DefaultError, Options<UserRevokeUserSessionsData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UserRevokeUserSessionsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userRevokeUserSessions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userRevokeUserSessionMutation = (options?: Partial<Options<UserRevokeUserSessionData>>): UseMutationOptions<unknown, DefaultError, Options<UserRevokeUserSessionData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UserRevokeUserSessionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userRevokeUserSession({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
